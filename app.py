from flask import Flask
from flask import jsonify
from flask import request
from tools import convert_b64_image, image_from_b64, image_to_shape
from flask_cors import cross_origin
from keras.models import load_model
import numpy as np

model = None
app = Flask(__name__)


@app.route('/backend/convert', methods=['POST'])
@cross_origin()
def convert_image():
    try:
        json = request.get_json()
        return jsonify({'success': True, 'data': (convert_b64_image(json["image"])).decode('ascii')})
    except Exception as err:
        return jsonify({'success': False, 'error': str(err)})


@app.route('/backend/classify', methods=['GET', 'POST'])
@cross_origin()
def classify_image():
    try:
        json = request.get_json()
        data = json["image"]
        # data = "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"
        img = image_from_b64(data)
        img = image_to_shape(img)
        inp = np.array(img)
        result_prob = model.predict(inp)
        result_class = np.argmax(result_prob)
        return jsonify({'success': True, 'class': int(result_class), 'prob': result_prob.tolist()[0]})
    except Exception as err:
        return jsonify({'success': False, 'error': str(err)})


model = load_model('network.h5')
model._make_predict_function()

if __name__ == "__main__":
    app.run()
